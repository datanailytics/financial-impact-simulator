# Development Dockerfile for Data Analytics Portfolio
# Includes additional tools for development, debugging, and testing

FROM python:3.11-bullseye

# Set environment variables for development
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=0 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=1.7.1 \
    DEBIAN_FRONTEND=noninteractive \
    ENVIRONMENT=development

# Install system dependencies and development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    # Version control
    git \
    git-lfs \
    # Database clients
    postgresql-client \
    mysql-client \
    sqlite3 \
    redis-tools \
    # Network tools
    curl \
    wget \
    httpie \
    netcat \
    telnet \
    # Development utilities
    vim \
    nano \
    less \
    tree \
    htop \
    ncdu \
    jq \
    # Python development
    python3-dev \
    python3-pip \
    python3-setuptools \
    python3-wheel \
    # Libraries for data science packages
    libatlas-base-dev \
    liblapack-dev \
    libblas-dev \
    gfortran \
    libhdf5-dev \
    libnetcdf-dev \
    # Image processing
    libpng-dev \
    libjpeg-dev \
    libtiff-dev \
    # XML/HTML processing
    libxml2-dev \
    libxslt-dev \
    # Compression
    zlib1g-dev \
    libbz2-dev \
    liblzma-dev \
    # SSL/Security
    libssl-dev \
    ca-certificates \
    # Timezone data
    tzdata \
    # Process management
    supervisor \
    # Additional useful tools
    bash-completion \
    sudo \
    locales \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set locale
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

# Install Node.js for Jupyter extensions and web tools
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create development user with sudo access
RUN groupadd -r devuser && \
    useradd -r -g devuser -G sudo -s /bin/bash -m devuser && \
    echo 'devuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set working directory
WORKDIR /workspace

# Install Poetry for dependency management
RUN pip install --upgrade pip setuptools wheel && \
    pip install poetry==${POETRY_VERSION}

# Copy dependency files
COPY requirements.txt requirements-api.txt* pyproject.toml* poetry.lock* ./

# Install all dependencies including development ones
RUN if [ -f pyproject.toml ]; then \
        poetry config virtualenvs.create false && \
        poetry install --no-interaction --no-ansi; \
    else \
        pip install -r requirements.txt && \
        if [ -f requirements-api.txt ]; then pip install -r requirements-api.txt; fi; \
    fi

# Install additional development tools
RUN pip install \
    # Debugging tools
    ipdb \
    pdb-tools \
    pydevd-pycharm \
    debugpy \
    # Code quality tools
    black \
    isort \
    flake8 \
    pylint \
    mypy \
    bandit \
    # Testing tools
    pytest \
    pytest-cov \
    pytest-asyncio \
    pytest-mock \
    pytest-benchmark \
    hypothesis \
    tox \
    # Documentation tools
    sphinx \
    sphinx-rtd-theme \
    sphinx-autodoc-typehints \
    mkdocs \
    mkdocs-material \
    # Profiling tools
    memory-profiler \
    line-profiler \
    py-spy \
    scalene \
    # Jupyter enhancements
    jupyter \
    jupyterlab>=4.0.0 \
    jupyter-lsp \
    jupyterlab-lsp \
    jupyterlab-git \
    jupyterlab-code-formatter \
    nbdime \
    # Interactive development
    ipython \
    ipywidgets \
    # Pre-commit hooks
    pre-commit \
    # API development tools
    httpx \
    watchgod \
    python-multipart

# Install Jupyter Lab extensions
RUN jupyter labextension install @jupyter-widgets/jupyterlab-manager && \
    jupyter serverextension enable --py jupyterlab_git && \
    jupyter serverextension enable --py jupyterlab_lsp

# Configure git for better diffs of notebooks
RUN nbdime config-git --enable

# Create directories for development
RUN mkdir -p /workspace/{src,tests,notebooks,data,models,logs,outputs,docs,.vscode} && \
    chown -R devuser:devuser /workspace

# Copy development configuration files
COPY --chown=devuser:devuser .gitignore .pre-commit-config.yaml* ./

# Set up pre-commit hooks
RUN if [ -f .pre-commit-config.yaml ]; then \
        sudo -u devuser pre-commit install; \
    fi

# Configure Jupyter
RUN mkdir -p /home/devuser/.jupyter && \
    echo "c.ServerApp.ip = '0.0.0.0'" >> /home/devuser/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.allow_root = False" >> /home/devuser/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.open_browser = False" >> /home/devuser/.jupyter/jupyter_lab_config.py && \
    chown -R devuser:devuser /home/devuser/.jupyter

# Expose ports for various services
EXPOSE 8888 8000 5000 6006 8501 3000

# Switch to development user
USER devuser

# Set up bash aliases for development
RUN echo "alias ll='ls -alF'" >> ~/.bashrc && \
    echo "alias la='ls -A'" >> ~/.bashrc && \
    echo "alias l='ls -CF'" >> ~/.bashrc && \
    echo "alias gs='git status'" >> ~/.bashrc && \
    echo "alias gc='git commit'" >> ~/.bashrc && \
    echo "alias gp='git push'" >> ~/.bashrc && \
    echo "alias pytest='python -m pytest'" >> ~/.bashrc && \
    echo "alias jl='jupyter lab --ip=0.0.0.0 --no-browser'" >> ~/.bashrc && \
    echo "alias format='black . && isort .'" >> ~/.bashrc

# Set Python path
ENV PYTHONPATH=/workspace:$PYTHONPATH

# Default command - starts Jupyter Lab
CMD ["jupyter", "lab", "--ip=0.0.0.0", "--no-browser", "--allow-root"]