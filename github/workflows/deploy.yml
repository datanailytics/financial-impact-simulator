name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    name: Build for GitHub Pages
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Build project
        env:
          PUBLIC_URL: /${{ github.event.repository.name }}
          VITE_API_URL: https://api.github.com
          VITE_ANALYTICS_ID: ${{ secrets.ANALYTICS_ID }}
        run: |
          npm run build:production
          npm run generate:sitemap
          npm run generate:reports

      - name: Generate documentation
        run: |
          npm run docs:build
          cp -r docs/.vuepress/dist/* dist/docs/

      - name: Optimize assets
        run: |
          npm run optimize:images
          npm run optimize:fonts
          npm run compress:assets

      - name: Generate performance report
        run: |
          npm run lighthouse:ci
          cp -r .lighthouseci dist/performance/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Deployment job
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        run: |
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deployment.outputs.page_url }})
          if [ $response -eq 200 ]; then
            echo "Deployment successful!"
          else
            echo "Deployment verification failed with status: $response"
            exit 1
          fi

  # Post-deployment tasks
  post-deploy:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Purge CDN cache
        run: |
          # CloudFlare cache purge
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'github-pages',
              required_contexts: [],
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ needs.deploy.outputs.page_url }}',
              description: 'Deployment completed successfully'
            });

      - name: Submit sitemap to search engines
        run: |
          # Google
          curl -s "https://www.google.com/ping?sitemap=${{ needs.deploy.outputs.page_url }}/sitemap.xml"
          
          # Bing
          curl -s "https://www.bing.com/ping?sitemap=${{ needs.deploy.outputs.page_url }}/sitemap.xml"

      - name: Run smoke tests
        run: |
          npm install -g puppeteer
          node scripts/smoke-tests.js ${{ needs.deploy.outputs.page_url }}

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            GitHub Pages Deployment Completed
            URL: ${{ needs.deploy.outputs.page_url }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Rollback job
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy]
    if: failure()
    steps:
      - name: Checkout previous commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}

      - name: Trigger rollback deployment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: '${{ github.event.before }}'
            });

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Deployment failed - Initiating rollback to previous version",
              attachments: [{
                color: 'warning',
                fields: [{
                  title: 'Rollback Information',
                  value: `Rolling back from ${context.sha} to ${{ github.event.before }}`,
                  short: false
                }]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}